name: Build, SCP, and Deploy Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 1: Build the Docker image.
      - name: Build Docker Image
        run: docker build -t musiclab-api:latest -f Dockerfile .

      # Step 2: Save the Docker image to a tar archive.
      - name: Save Docker Image to Tarball
        run: docker save -o musiclab-api.tar musiclab-api:latest

      # Step 2.5: Fix permissions on the tarball.
      # This step makes the file readable for all users.
      - name: Fix Tarball Permissions
        run: chmod 644 musiclab-api.tar


      # Step 3: Use SCP to securely transfer the tarball to the remote server.
      # This step uses the 'scp-action' from the same creator.
      - name: Transfer Image to Remote Server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          source: "musiclab-api.tar" # The file to send
          target: "/home/${{ secrets.SERVER_USERNAME }}" # The destination path on the server

            # Debug Step: Verify the file is on the server
      - name: Verify File Transfer
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            echo "Listing files in home directory:"
            ls -al /home/${{ secrets.SERVER_USERNAME }}
            echo "Listing temporary files in /tmp:"
            ls -al /tmp

      # Step 4: SSH into the remote server and deploy the image.
      - name: Deploy to Remote Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            echo "Loading new image from tarball..."
            docker load -i musiclab-api.tar
            
            echo "Stopping and removing existing container..."
            docker stop musiclab-api || true
            docker rm musiclab-api || true
            
            echo "Running new container..."
            
            docker run -d --name musiclab-api -p 8080:5106 -v /home/deploy/musiclabAPI/data:/data musiclab-api:latest
            
            echo "Removing temporary tarball..."
            rm musiclab-api.tar
            
            echo "Deployment complete!"

            echo "--- Debugging Container Status ---"
            docker ps -a
